[package]
name = "chrisbratti-website"
version = "0.1.7"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
actix-files = { version = "0.6.6", optional = true }
actix-web = { version = "4.10.2", optional = true, features = ["macros"] }
console_error_panic_hook = "0.1.7"
http = { version = "1.3.1", optional = true }
leptos = { version = "0.7.0", features = ["nightly"] }
leptos_meta = { version = "0.7.0" }
leptos_actix = { version = "0.7.0", optional = true }
leptos_router = { version = "0.7.0", features = ["nightly"] }
wasm-bindgen = "=0.2.100"
lettre ={version = "0.11.15", optional= true}
maud = {version = "0.27.0", optional=true}
dotenvy = { version = "0.15.7", optional = true }
lazy_static = { version = "1.5.0", optional = true }
cfg-if = "1.0.0"
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.140"
redis = {version = "0.29.1", optional = true}
rand = { version = "0.9.0", optional = true, features = ["std"] }
reqwest = { version = "0.12.15", optional = true , features = ["json", "multipart"]}
aes-gcm = { version = "0.10.3", optional = true }
hex = "0.4.3"
actix-session = { version = "0.10.1", features = ["redis-session"], optional = true }
actix-identity = { version = "0.8.0", optional = true }
actix-multipart = { version = "0.7.2", optional = true }
futures-util = { version = "0.3.31", optional = true }
sanitize-filename = { version = "0.6.0", optional = true }
uuid = { version = "1.16.0", features = ["v4"], optional = true }
chrono = { version = "0.4.40", optional = true }
tokio = { version = "1.44.2", features = ["full"], optional = true }

[features]
csr = ["leptos/csr"]
hydrate = ["leptos/hydrate"]
ssr = [
  "dep:actix-files",
  "dep:actix-web",
  "dep:leptos_actix",
  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
  "dep:lettre",
  "dep:maud",
  "dep:dotenvy",
  "dep:lazy_static",
  "dep:redis",
  "dep:rand",
  "dep:reqwest",
  "dep:aes-gcm",
  "dep:actix-session",
  "dep:actix-identity",
  "dep:actix-multipart",
  "dep:futures-util",
  "dep:sanitize-filename",
  "dep:uuid",
  "dep:chrono",
  "dep:tokio"
]
aes-gcm = ["dep:aes-gcm"]
actix-session = ["dep:actix-session"]
actix-identity = ["dep:actix-identity"]
futures-util = ["dep:futures-util"]
sanitize-filename = ["dep:sanitize-filename"]
uuid = ["dep:uuid"]
chrono = ["dep:chrono"]
tokio = ["dep:tokio"]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "chrisbratti-website"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"
# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "assets"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
